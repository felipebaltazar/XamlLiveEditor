using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace XamlLiveCode.SourceGenerator
{
    [Generator]
    public class XamlCodeResourceGenerator : ISourceGenerator
    {
        private const string XamlAttribute = "Xamarin.Forms.Xaml.XamlFilePathAttribute";

        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUGGENERATOR
            if (!Debugger.IsAttached)
                Debugger.Launch();
#endif
        }
        public void Execute(GeneratorExecutionContext context)
        {
            var mainSyntaxTree = context.Compilation.SyntaxTrees.First(x => x.HasCompilationUnitRoot);
            var rootDirectory = Path.GetDirectoryName(mainSyntaxTree.FilePath);
            var classes = ManualLoad(rootDirectory);
            var dictionary = new Dictionary<string, string>();

            foreach (var xamlClass in classes.Where(ValidateXamlClass))
            {
                var teste = Directory.GetCurrentDirectory();
                var csharpFilePath = xamlClass.FilePath;
                var fileName = Path.GetFileName(csharpFilePath.Replace(".g.cs", string.Empty));
                var directory = Directory.GetParent(csharpFilePath).ToString();

                for (int i = 0; i < 3; i++)
                {
                    directory = Directory.GetParent(directory).ToString();
                }

                var xamlFilePath = Path.Combine(directory, fileName);
                if (File.Exists(xamlFilePath))
                {
                    var classDeclaration = xamlClass.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().Last();
                    var className = classDeclaration.Identifier.ValueText;
                    var xamlCode = File.ReadAllText(xamlFilePath);

                    if (!dictionary.ContainsKey(className))
                        dictionary.Add(className, xamlCode);
                }
            }

            var classSource = ProcessClass(dictionary, context);
            context.AddSource("XamlCodeValues.g.cs", SourceText.From(classSource, Encoding.UTF8));
        }

        private bool ValidateXamlClass(SyntaxTree arg)
        {
            var classDeclaration = arg.GetRoot()
                .DescendantNodes()
                .OfType<ClassDeclarationSyntax>()
                .LastOrDefault();

            if (classDeclaration is null)
                return false;

            var attributeData = classDeclaration
                    .AttributeLists
                    .SelectMany(x => x.Attributes)
                    .FirstOrDefault(ad => ad.Name.ToString().EndsWith(XamlAttribute, StringComparison.OrdinalIgnoreCase));

            return attributeData != null;
        }

        private IEnumerable<SyntaxTree> ManualLoad(string rootDir)
        {
            foreach (var filepath in Directory.GetFiles(rootDir, "*.cs", SearchOption.AllDirectories))
            {
                var file = File.ReadAllText(filepath);
                yield return CSharpSyntaxTree.ParseText(file, path: filepath);
            }
        }

        private string ProcessClass(Dictionary<string, string> xamlClasses, GeneratorExecutionContext context)
        {
            var globalNamespace = context.Compilation.Assembly.GlobalNamespace;
            var source = new StringBuilder($@"
//------------------------------------------------------------------------------
// <auto-generated>
// O código foi gerado por uma ferramenta
//
// As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
// o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace LiveCodeXamlEditor 
{{
    public static class LiveEditorResources
    {{
        public static Dictionary<string, string> XamlValues = new Dictionary<string, string>() {{");

            source.AppendLine(string.Empty);
            for (var i = 0; i < xamlClasses.Count; i++)
            {
                var xamlName = xamlClasses.Keys.ElementAt(i);
                var xamlClass = xamlClasses[xamlName];
                var isLast = i == xamlClasses.Count - 1;
                source.AppendLine($@" {{ ""{xamlName}"", @""{xamlClass.Replace("\"", "\"\"")}""
        }}{(isLast ? string.Empty : ",")}");

            }

            source.Append(@"        };
    }
} ");
            return source.ToString();
        }
    }
}