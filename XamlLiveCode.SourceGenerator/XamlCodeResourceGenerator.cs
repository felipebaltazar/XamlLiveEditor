using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace XamlLiveCode.SourceGenerator
{
    [Generator]
    public class XamlCodeResourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUGGENERATOR
            if (!Debugger.IsAttached)
                Debugger.Launch();
#endif 
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxReceiver is SyntaxReceiver receiver))
                return;
            
            var dictionary = new Dictionary<string, string>();
            var classes = receiver.GetClasses((s) => context.Compilation.GetSemanticModel(s));

            foreach (var xamlClass in classes)
            {
                var teste = Directory.GetCurrentDirectory();
                var csharpFilePath = xamlClass.SyntaxTree.FilePath;
                var fileName = Path.GetFileName(csharpFilePath.Replace(".g.cs", string.Empty));
                var directory = Directory.GetParent(csharpFilePath).ToString();

                for (int i = 0; i < 3; i++)
                {
                    directory = Directory.GetParent(directory).ToString();
                }

                var xamlFilePath = Path.Combine(directory, fileName);

                if (File.Exists(xamlFilePath))
                {
                    var className = xamlClass.Identifier.ValueText;
                    var xamlCode = File.ReadAllText(xamlFilePath);
                    dictionary.Add(className, xamlCode);
                }
            }


            var classSource = ProcessClass(dictionary, context);
            context.AddSource("XamlCodeValues.g.cs", SourceText.From(classSource, Encoding.UTF8));
        }

        private string ProcessClass(Dictionary<string, string> xamlClasses, GeneratorExecutionContext context)
        {
            var globalNamespace = context.Compilation.Assembly.GlobalNamespace;
            var source = new StringBuilder($@"
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
namespace LiveCodeXamlEditor
{{
    public static class LiveEditorResources
    {{
        public static Dictionary<string, string> XamlValues = new Dictionary<string, string>()
        {{");

            source.AppendLine(string.Empty);

            for (var i = 0; i < xamlClasses.Count; i++)
            {
                var xamlName = xamlClasses.Keys.ElementAt(i);
                var xamlClass = xamlClasses[xamlName];
                var isLast = i == xamlClasses.Count - 1;
                source.AppendLine($@"           {{ ""{xamlName}"", @""{xamlClass.Replace("\"", "\"\"")}"" }}{(isLast ? string.Empty : ",")}");
            }

            source.Append(@"
        };
    }
}
");

            return source.ToString();
        }
    }
}
